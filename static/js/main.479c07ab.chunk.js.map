{"version":3,"sources":["components/calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","handleAdd","state","initial","output","prev_val","result","parseInt","setState","symbol","handleResult","handleClear","item","this","newval2","newval","className","map","index","key","type","onClick","handleClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAiFeA,E,YA7EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAwBVC,UAAY,WAAO,IAAD,EACuB,EAAKC,MAAlCC,EADM,EACNA,QAASC,EADH,EACGA,OAAOC,EADV,EACUA,SACpBC,EAASC,SAASF,GAAYE,SAASJ,GAC3C,EAAKK,SAAS,CACVC,OAAQ,IACRJ,SAAUC,EACVH,QAAS,EACTC,OAAQA,EAAS,SAhCN,EAmCnBM,aAAe,WAAO,IAAD,EAC6B,EAAKR,MAA3CC,EADS,EACTA,QAASE,EADA,EACAA,SAAUI,EADV,EACUA,OAAQL,EADlB,EACkBA,OAC/BE,EAAS,EACE,MAAXG,IACAH,EAASC,SAASF,GAAYE,SAASJ,IAE3C,EAAKK,SAAS,CACVJ,OAAQA,EAAS,MAAQE,EACzBH,QAASG,EACTD,SAAU,EACVI,OAAQ,MA7CG,EAgDnBE,YAAY,WACR,EAAKH,SAAS,CACVJ,OAAO,EACPD,QAAQ,KAjDZ,EAAKD,MAAQ,CACTC,QAAS,EACTE,SAAU,EACVD,OAAQ,EACRK,OAAQ,IANG,E,yEASPG,GAAO,IAAD,EACcC,KAAKX,MAAzBC,EADM,EACNA,QAASC,EADH,EACGA,OACbU,EAAU,GAEVA,EADW,IAAXV,EACUQ,EAGAR,EAAS,GAAKQ,EAE5B,IAAIG,EAASZ,EAAU,GAAKS,EAE5BC,KAAKL,SAAS,CACVL,QAASY,EACTX,OAAQU,M,+BAgCN,IAAD,OACGV,EAAWS,KAAKX,MAAhBE,OAER,OACI,yBAAKY,UAAU,SACX,uBAAGA,UAAU,OAAOZ,GACpB,yBAAKY,UAAU,cACX,yBAAKA,UAAU,WALjB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAMjBC,KAAI,SAACL,EAAMM,GACZ,OAAO,4BAAQC,IAAKD,EAAOE,KAAK,SAASC,QAAS,kBAAM,EAAKC,YAAYV,KAAQA,MAErF,4BAAQQ,KAAK,SAASC,QAASR,KAAKZ,WAApC,KACA,4BAAQmB,KAAK,SAASC,QAASR,KAAKH,cAApC,OAGR,uBAAGM,UAAU,UACb,4BAAQI,KAAK,SAASC,QAASR,KAAKF,aAApC,e,GAvESY,IAAMC,WCahBC,MAXf,WACE,OACE,yBAAKT,UAAU,OACb,gCACE,wBAAIA,UAAU,QAAd,mBAEF,kBAAC,EAAD,QCCcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.479c07ab.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Calculator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            initial: 0,\n            prev_val: 0,\n            output: 0,\n            symbol: ''\n        }\n    }\n    handleClick(item) {\n        const { initial, output } = this.state;\n        let newval2 = '';\n        if (output === 0) {\n            newval2 = item\n        }\n        else {\n            newval2 = output + '' + item;\n        }\n        let newval = initial + '' + item;\n\n        this.setState({\n            initial: newval,\n            output: newval2\n        })\n    }\n    handleAdd = () => {\n        const { initial, output,prev_val } = this.state;\n        let result = parseInt(prev_val) + parseInt(initial)\n        this.setState({\n            symbol: '+',\n            prev_val: result,\n            initial: 0,\n            output: output + ' + '\n        })\n    }\n    handleResult = () => {\n        const { initial, prev_val, symbol, output } = this.state;\n        let result = 0;\n        if (symbol === '+') {\n            result = parseInt(prev_val) + parseInt(initial)\n        }\n        this.setState({\n            output: output + ' = ' + result,\n            initial: result,\n            prev_val: 0,\n            symbol: '',\n        })\n    }\n    handleClear=()=>{\n        this.setState({\n            output:0,\n            initial:0,\n        })\n    }\n    render() {\n        const { output } = this.state;\n        let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n        return (\n            <div className='inner'>\n                <p className='top'>{output}</p>\n                <div className='calculator'>\n                    <div className='numbers'>\n                        {arr.map((item, index) => {\n                            return <button key={index} type='button' onClick={() => this.handleClick(item)}>{item}</button>\n                        })}\n                        <button type='button' onClick={this.handleAdd}>+</button>\n                        <button type='button' onClick={this.handleResult}>=</button>\n                    </div>\n                </div>\n                <p className='bottom'>\n                <button type='button' onClick={this.handleClear}>Clear</button>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport Calculator from './components/calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"logo\">Calculator App</h1>\n      </header>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}